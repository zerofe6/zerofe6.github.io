{"meta":{"title":"bofan's blog","subtitle":"","description":"","author":"范博","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-01-10T07:48:47.000Z","updated":"2020-01-10T07:48:47.677Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-10T07:47:00.000Z","updated":"2020-01-10T07:47:00.390Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-01-10T07:48:33.000Z","updated":"2020-01-10T07:48:33.095Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"MySQL基础-DML-DML语言","slug":"MySQL基础-DML-DML语言","date":"2020-08-12T14:13:10.000Z","updated":"2020-08-12T14:13:10.348Z","comments":true,"path":"2020/08/12/MySQL基础-DML-DML语言/","link":"","permalink":"http://yoursite.com/2020/08/12/MySQL%E5%9F%BA%E7%A1%80-DML-DML%E8%AF%AD%E8%A8%80/","excerpt":"","text":"","categories":[],"tags":[{"name":"xxx","slug":"xxx","permalink":"http://yoursite.com/tags/xxx/"}]},{"title":"MySQL基础-DQL-联合查询","slug":"MySQL基础-DQL-联合查询","date":"2020-08-12T14:12:32.000Z","updated":"2020-08-12T14:20:47.988Z","comments":true,"path":"2020/08/12/MySQL基础-DQL-联合查询/","link":"","permalink":"http://yoursite.com/2020/08/12/MySQL%E5%9F%BA%E7%A1%80-DQL-%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"联合查询UNION 联合 合并：将多条查询语句的结果和并为一个结果 语法：查询语句1union查询语句2UNION…. 应用场景：要查询的结果来自于多个表，且多个表没有直接的连接关系 但查询的信息一般是一致的 特点：要求多条查询语句的查询列数是一致的要求多条查询语句每一列的类型和顺序一致union关键字默认去重 如果使用union all可以包含重复项 引入案例：查询部门编号&gt;90或邮箱编号包含a的员工信息SELECT * from employees e WHERE e.department_id &gt; 90 OR e.email LIKE &#39;%a%&#39;; SELECT * from employees e WHERE e.department_id &gt; 90 union SELECT * from employees e where e.email LIKE &#39;%a%&#39;; SELECT * from employees e WHERE e.department_id &gt; 90 union all SELECT * from employees e where e.email LIKE &#39;%a%&#39;;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-子查询经典案例","slug":"MySQL基础-DQL-子查询经典案例","date":"2020-08-12T14:09:11.000Z","updated":"2020-08-12T14:18:10.818Z","comments":true,"path":"2020/08/12/MySQL基础-DQL-子查询经典案例/","link":"","permalink":"http://yoursite.com/2020/08/12/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/","excerpt":"","text":"1.查询工资最低的员工信息：last_name salary· SELECT last_name ,salary from employees WHERE salary =( SELECT MIN(salary) from employees ); 2.查询平均工资最低的部门信息SELECT * FROM departments d WHERE d.department_id = ( SELECT department_id from employees GROUP BY department_id having avg(salary) = ( SELECT min(t.avg ) from (SELECT avg(salary) avg from employees GROUP BY department_id having department_id is not null ORDER BY avg(salary) ) t ) ); #方式2： 使用分页 SELECT * FROM departments d WHERE d.department_id = ( SELECT department_id from employees GROUP BY department_id having department_id is not null ORDER BY avg(salary) LIMIT 1 ); 3.查询平均工资最低的部门信息和该部门平均工资SELECT t1.`平均工资`,d.* FROM departments d,( SELECT avg(salary) 平均工资 from employees a GROUP BY a.department_id having avg(salary) ORDER BY avg(salary) asc LIMIT 1 ) t1 WHERE d.department_id = ( SELECT department_id from employees GROUP BY department_id having avg(salary) = ( SELECT min(t.avg ) from (SELECT avg(salary) avg from employees GROUP BY department_id having department_id is not null ORDER BY avg(salary) ) t ) ); 4.查询平均工资最高的job信息SELECT j.* from jobs j WHERE j.job_id = ( SELECT e.job_id from employees e GROUP BY e.job_id having AVG(e.salary) ORDER BY AVG(e.salary) DESC LIMIT 1 ); SELECT j.*,t.`平均工资` from jobs j,( SELECT e.job_id,AVG(e.salary) 平均工资 from employees e GROUP BY e.job_id having AVG(e.salary) ORDER BY 平均工资 DESC limit 1 ) t WHERE j.job_id = t.job_id ; 5.查询平均工资高于工资平均工资的部门有哪些SELECT d.*,tt.`部门平均工资`,t.`工资平均工资` from ( SELECT avg(salary) 工资平均工资 from employees ) t ,( SELECT avg(e.salary) 部门平均工资 ,e.department_id 部门编号 from employees e GROUP BY e.department_id ) tt ,departments d WHERE tt.`部门平均工资`&gt;t.`工资平均工资` and d.department_id = tt.部门编号 6.查询出公司所有manager的详细信息SELECT e.* from employees e WHERE e.manager_id in ( SELECT a.employee_id from employees a where a.manager_id is not null ); 7.各个部门中，最高工资最低的那个部门的，最低工资是多少SELECT MAX(e.salary) 部门最高工资 ,e.department_id 部门编号 from employees e GROUP BY e.department_id ORDER BY 部门最高工资 DESC LIMIT 1; SELECT t.`部门最高工资`,d.* from departments d,( SELECT MAX(e.salary) 部门最高工资 ,e.department_id 部门编号 from employees e GROUP BY e.department_id ORDER BY 部门最高工资 asc LIMIT 1 ) t WHERE d.department_id = t.`部门编号`; 8.查询平均工资最高的部门的manager的详细信息：last_name department_id email salarySELECT a.*,t.`部门平均最高工资` from employees a,( SELECT ROUND(avg(e.salary),2) 部门平均最高工资 ,e.department_id 部门编号,e.manager_id 部门领导编号 from employees e GROUP BY e.department_id ORDER BY 部门平均最高工资 desc LIMIT 1 ) t WHERE a.department_id = t.`部门编号` and a.employee_id =t.`部门领导编号` ;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-sql99语法总结","slug":"MySQL基础-DQL-sql99语法总结","date":"2020-08-11T14:06:56.000Z","updated":"2020-08-11T15:00:27.520Z","comments":true,"path":"2020/08/11/MySQL基础-DQL-sql99语法总结/","link":"","permalink":"http://yoursite.com/2020/08/11/MySQL%E5%9F%BA%E7%A1%80-DQL-sql99%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/","excerpt":"","text":"sql99语法总结：1.内连接语法： SELECT 查询列表from 表1INNER JOIN 表2on 连接条件where 筛选条件group BY 分组条件having 分组后筛选order BY 排序列表LIMIT 分页条件; 特点： 表的顺序可以调换内连接的结果 = 多表的交集n个表连接 至少需要n-1个连接条件 分类：等值连接非等值连接自连接 2.外连接语法：SELECT 查询列表from 表1left|right|full OUTER JOIN 表2on 连接条件where 筛选条件group BY 分组条件having 分组后筛选order BY 排序列表LIMIT 分页条件; 特点：查询的结果 = 主表中所有的行，其中从表和它匹配的将显示行 如果从表没有匹配的则显示nullLEFT OUTER JOIN 左边为主表 LEFT OUTER JOIN 右边为主表 full join 两边都为主表 (mysql 不支持)一般用于查询除交集部分剩余的不匹配行 3.交叉连接语法：SELECT 查询列表from 表1CROSS JOIN 表2where 筛选条件group BY 分组条件having 分组后筛选order BY 排序列表LIMIT 分页条件; 特点：类似于笛卡尔乘积 4.子查询含义：嵌套在其它内部的select语句成为子查询或内查询外部的语句可以为：insert update delete select 等 一般select语句作为外部语句较多外部语句为select一般称为 主查询 或 外查询 分类：按位置分类：select 后面 仅仅支持标量子查询 from 后面 表子查询 where |having 后面 标量子查询 列子查询 行子查询 exits 后面 标量子查询 列子查询 行子查询 表子查询按结果集分类： 标量子查询 (单行子查询) 结果为一行一列 列子子查询 （多行子查询） 结果为一列多行 行子查询 结果集为多行多列 表子查询 结果集为多行多列 示例：where或having后面 1.标量子查询案例：查询最低工资的员工姓名和工资 SELECT e.last_name,e.salary from employees e WHERE e.salary =( SELECT min(salary) from employees ); 2.列子查询案例：查询所有事领导的员工姓名 SELECT e.last_name FROM employees e WHERE e.employee_id = any( SELECT manager_id from employees WHERE manager_id is not null ); SELECT *from employees; 5.分页查询SELECT 查询列表from 表limit offset ,size; 注意 起始位置为 0 与 SUBSTR(str FROM pos FOR len) 从1开始区分 公式：假如要显示的页数为page 每一页条目数为sizeSELECT 查询列表from 表limit (page -1)size ,size;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-分页查询","slug":"MySQL基础-DQL-分页查询","date":"2020-08-11T14:06:39.000Z","updated":"2020-08-11T14:54:14.820Z","comments":true,"path":"2020/08/11/MySQL基础-DQL-分页查询/","link":"","permalink":"http://yoursite.com/2020/08/11/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"分页查询应用场景：当要显示的数据有多页显示需求时 需要分页提交sql请求 语法：​ select 查询列表​ from 表​ 【join type】 join 表2​ on 连接条件​ where 筛选条件​ group by 分组字段​ HAVING 分组后筛选​ order by 排序条件​ limit offset ，seize ;​ offset :要显示条目的起始索引（起始索引从0开始） size : 要显示的条目个数特点：​ limit语句放在查询语句的最后​ 公式：​ 例：​ 要显示的页数为page ，每页的条目数为size​ SELECT 查询列表​ from 表​ limit (page-1)*size,size;​ 案例1：查询前5条员工信息SELECT * from employees limit 0 ,5; SELECT * from employees limit 5; 查询第11条到第25条SELECT * from employees limit 10 ,15; 案例3：查询有奖金的员工信息 ，并且工资较高的前十名 SELECT * FROM employees WHERE commission_pct IS NOT NULL ORDER BY salary DESC LIMIT 10; 已知表stuinfoid 学号name 姓名email 邮箱 john@126.comgradeId 年纪编号sex 性别age 年龄 已知表gradeid 年纪编号gradeName 年级名称 作业作业1： 查询所有学员的邮箱的用户名（注意：邮箱@前面的字符）SELECT SUBSTR(email ,1,INSTR(email,&#39;@&#39;) -1) from stuinfo; 作业2：查询男生和女生的个数SELECT sex,COUNT(*) from sutinfo GROUP BY sex; 作业3：查询年龄&gt;18岁的所有学生的姓名和年级名称SELECT s.name , g.greadeName from stuinfo s INNER JOIN grade g on s.gradeId = g.id where age&gt;18; 作业4：查询哪个年级的学生最小年龄&gt;20岁SELECT g.gradeName,MIN(s.age) from stuinfo s INNER JOIN grade g on s.gradeId = g.id GROUP BY g.id HAVING MIN(s.age)&gt;20; 作业5：试说出查询语句中涉及到的所有 关键字 以及执行先后顺序select 查询列表 第七步from 表 第一步执行连接类型 join 表2 第二步执行on 连接条件 第三步执行where 筛选条件 第四步GROUP BY 分组列表 第五步having 分组后的筛选条件 第六步ORDER BY 排序列表 第八步limit 偏移 , 条目数; 第九步","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-连接查询sql99语法","slug":"MySQL基础-DQL-连接查询sql99语法","date":"2020-08-11T14:06:18.000Z","updated":"2020-08-12T14:32:38.950Z","comments":true,"path":"2020/08/11/MySQL基础-DQL-连接查询sql99语法/","link":"","permalink":"http://yoursite.com/2020/08/11/MySQL%E5%9F%BA%E7%A1%80-DQL-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2sql99%E8%AF%AD%E6%B3%95/","excerpt":"","text":"sql99语法语法： SELECT 查询列表 from 表1 别名 【连接类型】 join 表2 别名 on 连接条件 【where 筛选条件】 【group by 分组条件】 【having 筛选条件】 【order by 排序条件】分类：内连接（重点）：inner外连接 左外连接（重点）：left 【outer】 右外连接 :right 【outer】 全外连接 :full 【outer】交叉连接：cross 一：内连接SELECT 查询列表from 表1 别名INNER JOIN 表2 别名on 连接条件 分类：等值连接 非等值连接 、自连接 特点：添加排序、分组、筛选inner 可以省略筛选条件放在where 后面，连接条件放在where 后面，提高分离性 ，便于阅读等值连接inner join 和sql92的等值连接效果是一样的，都是查询多表的交集部分 1.等值连接#案例1：查询员工名部门名 select e.last_name 员工名, d.department_name 部门名 from myemployees.employees e inner join myemployees.departments d on e.department_id = d.department_id; #案例2：查询名字中包含e的员工名和工种名 SELECT e.last_name 员工名, j.job_title 工种名 from myemployees.employees e inner JOIN myemployees.jobs j on e.job_id = j.job_id WHERE e.last_name LIKE &#39;%e%&#39;; #案例3：查询部门个数大于3的城市名和部门个数 SELECT count(*) 部门个数 ,l.city 城市名 from myemployees.locations l INNER JOIN myemployees.departments d on d.location_id = l.location_id GROUP BY l.city HAVING COUNT(*) &gt;3 order BY COUNT(*) desc; #案例4：查询部门员工个数&gt;3的部门名和员工个数 并按个数降序 SELECT count(*) 部门员工个数 , d.department_name 部门名 from myemployees.employees e INNER JOIN myemployees.departments d on e.department_id = d.department_id GROUP BY d.department_name HAVING count(*)&gt;3 ORDER BY COUNT(*) desc; #案例5：查询员工名、部门名、工种名并按部门降序 (添加3表连接) select e.last_name 员工名,d.department_name 部门名,j.job_title 工种名 from myemployees.employees e INNER JOIN myemployees.departments d on e.department_id = d.department_id INNER JOIN myemployees.jobs j on e.job_id = j.job_id ORDER BY d.department_name desc; 2.非等值连接#查询员工的工资级别 SELECT e.salary 工资, g.grade_level 工资等级 from myemployees.employees e INNER JOIN girls.job_grades g on e.salary BETWEEN g.lowest_sal and g.highest_sal; #查询每个工资级别的个数&gt;3，并且按工资级别降序 SELECT COUNT(*) 工资级别个数,e.salary,g.grade_level 工资级别 FROM myemployees.employees e INNER JOIN girls.job_grades g on e.salary BETWEEN g.lowest_sal and g.highest_sal GROUP BY g.grade_level HAVING COUNT(*)&gt;3 ORDER BY g.grade_level DESC; 3.自连接#查询员工的名字包含字符k、上级的名字 SELECT e.employee_id 员工编号, e.last_name 员工的姓名 , em.employee_id 上级编号, em.last_name 上级姓名 from myemployees.employees e INNER JOIN myemployees.employees em on e.manager_id = em.employee_id WHERE e.manager_id is not null and e.last_name LIKE &#39;%k%&#39;; 二：外连接：外连接用于查询一个表中有另一个表没有的记录 特点 外连接中的查询结果为主表中的所有记录 如果从表中有和它匹配的 则显示匹配的值 如果从表中没有和它匹配的 则显示null 外连接的查询结果 = 内连接+主表中有而从表中没有的记录 左外连接 left join 左边的为主表 右外连接 right join 右边的是主表 左外连接和右外连接 交换两个表的顺序可以实现相同的结果 全外连接相当于 内连接的结果 + 表1中有表2中没有 + 表1中没有表2中有的 #引入：查询没有男朋友的女生 左外连接SELECT be.id 女生编号 ,be.`name` 女生名字 , b.boyName 男生名,b.id 男生编号 from girls.beauty be left outer join girls.boys b on b.id = be.boyfriend_id WHERE b.id is null; 右外连接SELECT be.id 女生编号 ,be.`name` 女生名字 , b.boyName 男生名,b.id 男生编号 from girls.boys b right outer join girls.beauty be on b.id = be.boyfriend_id WHERE b.id is null; #案例1：查询哪个部门没有员工 SELECT d.department_id 部门编号 , d.department_name 部门名称 , e.department_id 员工表部门编号 from myemployees.employees e RIGHT OUTER JOIN myemployees.departments d on d.department_id = e.department_id WHERE e.department_id is null; 全外连接 mysql 不支持全外连接SELECT b.* ,bo.* from girls.beauty be full outer join girls.boys b on be.boyfriend_id = b.id 交叉连接 笛卡尔乘积SELECT be.* ,b.* from girls.beauty be CROSS join girls.boys b; sql 92 和sql99sql99 支持性更好可读性：sql99 实现连接条件和筛选条件的分离 可读性较高","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-排序分组常见函数复习","slug":"MySQL基础-DQL-排序分组常见函数复习","date":"2020-08-11T14:05:49.000Z","updated":"2020-08-11T14:44:44.878Z","comments":true,"path":"2020/08/11/MySQL基础-DQL-排序分组常见函数复习/","link":"","permalink":"http://yoursite.com/2020/08/11/MySQL%E5%9F%BA%E7%A1%80-DQL-%E6%8E%92%E5%BA%8F%E5%88%86%E7%BB%84%E5%B8%B8%E8%A7%81%E5%87%BD%E6%95%B0%E5%A4%8D%E4%B9%A0/","excerpt":"","text":"一：排序查询语法：SELECT 查询列表from 表where 筛选条件order by 排序列表【asc desc 】 特点：1.asc升序 desc降序 默认升序 2.排序列表支持 单个字段 、 多个字段、函数、表达式 、别名 3.ORDER BY 一般放在查询语句的最后 除limit之外 二：常见函数功能：类似于语言的函数好处：提高重用性和隐藏细节调用：select 函数名 （实参列表） 单行函数:1.字符函数concat 连接substr 截取字串upper 变大写lower 变小写replace 替换length 获取长度lpad 左填充rpad 右填充instr 获取字串第一次出现的索引 2.数学函数ceil 向上取整round 四舍五入mod 取模floor 向下取整truncate 截断rand 获取随即数，默认返回0-1之间的小数 3.日期函数NOW() 获取当前日期时间year 返回年month 返回月份dayHOURminuteseconddate_fromat 将日期转换为字符curdate 返回当前日期str_to_date 将字符转换为日期curtime 返回当前时间datediff 返回两个日期相差的天数monthname 英文形式返回月 4.其它函数version 当前数据库的版本号database 当前数据库user 当前用户password（’字符’） 返回该字符的密码形式MD5 返回该字符的MD5的加密形式SELECT MD5(‘你好’); 5.流程控制函数if(条件表达式，表达式1，表达式2)：条件表达式成立返回表达式1 否则返回表达式2case情况1case 变量或表达式或字段when 常量 then 值1when 常量 then 值2…ELSE 值 nend case情况2casewhen 条件1 then 值1when 条件2 then 值2…ELSE 值 nend 分组函数：1.分类：max 最大值min 最小值sum 求和avg 平均值count 计数 2.特点：语法：select max（字段） from 表名; 支持的类型：sum 和 avg一般用于处理数值型max 、min 、count 可以处理任何数据类型 以上分组函数都自动忽略null值都可以搭配distinct 使用 达到去重的效果select sum(DISTINCT 字段) from 表; count函数：count(字段) 统计字段的非空值个数count():统计结果集的行数案例：查询每个部门的员工个数SELECT count(),e.department_idfrom myemployees.employees eGROUP BY e.department_id; count(1):统计结果集的行数效率上：MyIsAM存储引擎 count（*）效率最高InnodB存储引擎 两者差不多 &gt;count（字段） 和分组函数一同查询的字段要求是group by 后面出现的字段 分组查询语法：select 分组函数，分组后的字段from 表名where 筛选条件group by 分组字段【having 分组后的筛选】【order by 排序列表】 特点：分组前筛选：select 分组函数，分组后的字段from 表名where 筛选条件group by 分组字段【order by 排序列表】 分组后筛选：select 分组函数，分组后的字段from 表名group by 分组字段【having 分组后的筛选】【order by 排序列表】","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-连接查询","slug":"MySQL基础-DQL-连接查询","date":"2020-08-11T14:04:59.000Z","updated":"2020-08-11T14:46:47.221Z","comments":true,"path":"2020/08/11/MySQL基础-DQL-连接查询/","link":"","permalink":"http://yoursite.com/2020/08/11/MySQL%E5%9F%BA%E7%A1%80-DQL-%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"连接查询含义：又称多表查询 查询的字段来源于多个表格时， 用到多表查询 笛卡尔乘积现象： 表1有n行 表2有m行 总计结果 m*n行发生原因：没有有效的连接条件如何避免：添加有效的连接条件 分类：​ 按年代分类：​ sql92标准：仅仅支持内连接​ sql99标准（推荐使用）：支持内连接 、外连接（左外连接、右外连接） 、交叉连接 按功能进行分类： 内连接： 等值连接 非等值连接 自连接 外连接 左外连接 右外连接 全外连接 交叉连接select * from beauty; select * from boys; select name , boyName from beauty ,boys; 笛卡尔集的错误情况 select count(*) from beauty; select count(*) from boys; 第一个表输出12行 第二个表输入4行 最终结果 总计：12*4 = 48行 select name , boyName from beauty ,boys where beauty.boyfriend_id = boys.id; 一、sql92标准1.等值连接： 1.多表等值连接的结果为多表的交集部分 2.n个表连接 至少需要n-1个连接条件 3.多表的顺序没有要求 4.一般需要为表取别名 5.可以搭配前面介绍的所有字句使用 比如排序、分组、筛选 案例1：查询女神民对应的男神民select name, boyName from beauty ,boys WHERE beauty.boyfriend_id = boys.id; 案例2：查询员工名对应的部门名SELECT last_name 员工名, department_name 部门名 FROM myemployees.employees,myemployees.departments where myemployees.employees.department_id = myemployees.departments.department_id; 2.为表取别名提高语句的简介度区分多个重名的字段注意： 如果为表 取了别名 则查询的字段就不能再用原来的表名去限定 查询工种号 、 员工名、工种名select last_name 员工名, myemployees.employees.job_id 工种号, job_title 工种名 from myemployees.employees , myemployees.jobs WHERE myemployees.employees.job_id = myemployees.jobs.job_id; select last_name 员工名,j.job_id 工种号, job_title 工种名 from myemployees.employees e , myemployees.jobs j WHERE e.job_id = j.job_id; 3.两个表的顺序是否可以调换select last_name 员工名,j.job_id 工种号, job_title 工种名 from myemployees.jobs j,myemployees.employees e WHERE e.job_id = j.job_id; 4.可以加上筛选？案例：查询有奖金的员工名、部门名SELECT e.last_name ,d.department_name,e.commission_pct from myemployees.employees e,myemployees.departments d WHERE e.commission_pct is not null and e.department_id = d.department_id; 案例2:查询城市名中第二个字符为o的部门名和城市名 SELECT l.city , d.department_name from myemployees.departments d,myemployees.locations l WHERE l.location_id = d.location_id and l.city LIKE &#39;_o%&#39;; SELECT * FROM myemployees.employees; 5.可以加分组#案例1:查询每个城市的部门个数 SELECT count(*) 部门个数 ,l.city FROM myemployees.locations l, myemployees.departments d WHERE l.location_id = d.location_id GROUP BY l.city; 案例2：查询有奖金的每个部门部门名和部门的领导编号和部门的最低工资错误示例SELECT e.commission_pct 奖金, d.department_name 部门名, e.manager_id 领导编号, count(*) 个数,MIN(e.salary) from myemployees.employees e,myemployees.departments d WHERE e.commission_pct is not null and e.department_id = d.department_id GROUP BY d.department_name,e.manager_id ; SELECT e.commission_pct 奖金, d.department_name 部门名, d.manager_id 领导编号, count(*) 个数,MIN(e.salary) from myemployees.employees e,myemployees.departments d WHERE e.commission_pct is not null and e.department_id = d.department_id GROUP BY d.department_name,d.manager_id ; 6.可以加排序案例1：查询每个工种的工种名、和员工个数 并按员工个数降序select j.job_title 工种名, COUNT(*) 员工个数 from myemployees.employees e ,myemployees.jobs j WHERE e.job_id = j.job_id GROUP BY e.job_id order by COUNT(*) desc; 7.可以实现三表连接案例：查询员工名、部门名、和所在的城市select e.last_name 员工名 , d.department_name 部门名, l.city 城市 from myemployees.employees e, myemployees.departments d,myemployees.locations l where e.department_id = d.department_id and d.location_id = l.location_id; 2.非等值连接#工资等级 CREATE TABLE job_grades (grade_level VARCHAR(3), lowest_sal int, highest_sal int); INSERT INTO job_grades VALUES (&#39;A&#39;, 1000, 2999); INSERT INTO job_grades VALUES (&#39;B&#39;, 3000, 5999); INSERT INTO job_grades VALUES(&#39;C&#39;, 6000, 9999); INSERT INTO job_grades VALUES(&#39;D&#39;, 10000, 14999); INSERT INTO job_grades VALUES(&#39;E&#39;, 15000, 24999); INSERT INTO job_grades VALUES(&#39;F&#39;, 25000, 40000); 案例1：查询员工的工资和工资级别SELECT * from job_grades; SELECT e.last_name 姓名 , e.salary 工资 ,jg.grade_level 工资等级 from myemployees.employees e, girls.job_grades jg WHERE e.salary BETWEEN jg.lowest_sal and jg.highest_sal; 3.自连接案例：查询员工名以及它的上级的名称 SELECT e.employee_id 员工编号 , e.manager_id 对应领导编号, e.last_name 员工名, es.last_name 领导名称 from myemployees.employees e,myemployees.employees es WHERE e.manager_id is not null and e.manager_id = es.employee_id; 作业 1作业1：显示员工表的最大工资 ，工资平均值 SELECT MAX(e.salary) ,avg(e.salary) from myemployees.employees e ; 作业2：查询员工表的员工编号、职位编号、姓名、按部门编号降序 工资升序select e.employee_id 员工编号, e.job_id 职位编号,e.department_id 部门编号, e.last_name 姓名,e.salary 工资 from myemployees.employees e ORDER BY e.department_id desc ,salary ASC; 作业3：查询员工表中job_id 包含a和e的 并且a在e的前面 SELECT e.job_id from myemployees.employees e WHERE e.job_id LIKE &#39;%a%e%&#39;; 作业4：已知表student 里面有 id 学号、 name 、gradeId年级编号#已知表grade 里面有年级编号 id name 年级名#已知表result 里面有id score studentNo 学号 要求查询 姓名、 年级名 、成绩 SELECT s.name 姓名, g.name 年级名 ,r.score 成绩 from student s , grade g,restult r WHERE s.id = r.id and s.gradeId = g.id 作业5:显示当前日期，以及去前后空格 截取子字串的函数select NOW(); select TRIM(&#39; 你好 &#39;); SELECT SUBSTR(&#39;helloworld&#39;,3); SELECT SUBSTR(&#39;helloworld&#39;,1,5); 作业2作业1：显示所有员工的姓名、部门号和部门名称 SELECT e.last_name 员工姓名 , e.department_id 部门号 ,d.department_name 部门名称 from myemployees.employees e,myemployees.departments d WHERE e.department_id = d.department_id; 作业2：查询90号部门员工的job_id 和90号部门的location_idSELECT e.job_id 工号, l.location_id 位置编号 from myemployees.employees e,myemployees.locations l ,myemployees.departments d WHERE d.department_id=90 and e.department_id = d.department_id and d.location_id = l.location_id; 作业三：查询所有有奖金的员工的last_name department_name location_id city SELECT e.last_name ,d.department_name,l.city from myemployees.employees e,myemployees.locations l,myemployees.departments d WHERE e.commission_pct is not null and e.department_id = d.department_id and d.location_id =l.location_id; 作业四：选择city 在Toronto 工作的员工的last_name job_id department_id department_name SELECT e.last_name , e.job_id ,d.department_name,l.city from myemployees.employees e,myemployees.departments d ,myemployees.locations l WHERE e.department_id = d.department_id and d.location_id = l.location_id and l.city = &#39;Toronto&#39;; 作业五：查询每个工种、每个部门的部门名、工种名、和最低工资SELECT e.department_id ,d.department_name ,j.job_title ,MIN(e.salary) from myemployees.employees e,myemployees.departments d,myemployees.jobs j WHERE e.department_id = d.department_id and e.job_id = j.job_id GROUP BY e.department_id,j.job_title; 作业六：查询每个国家的部门个数大于2的国家编号select COUNT(*) 部门个数 ,l.country_id 国家编号 from myemployees.departments d, myemployees.locations l WHERE d.location_id = l.location_id GROUP BY l.country_id HAVING count(*)&gt;2; 作业七：选择指定的员工姓名、员工号以及它的管理者的姓名和员工号SELECT e.last_name 员工姓名 ,e.employee_id 员工号,em.last_name 管理者姓名,em.employee_id 管理者工号 from myemployees.employees e,myemployees.employees em WHERE e.manager_id = em.manager_id and e.manager_id is not null;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-分组查询","slug":"MySQL基础-DQL-分组查询","date":"2020-07-24T09:10:19.000Z","updated":"2020-07-26T11:02:05.271Z","comments":true,"path":"2020/07/24/MySQL基础-DQL-分组查询/","link":"","permalink":"http://yoursite.com/2020/07/24/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"分组查询简介 语法 select 分组函数 ，列（要求出现在group by的后面）from 表【where 筛选条件】group by 分组的列表【order by 字句】 注意： 要求查询列表必须特殊，要求是分组函数和group by 后出现的子弹 特点：一： 分组查询中的筛选条件分为两类 数据源 位置 关键字 分组前筛选 原始表 GROUP BY 的前面 WHERE 分组后筛选 分组后的结果集 GROUP BY 的后面 HAVING 1.分组函数做条件肯定是放在having 字句中 2.能用分组前筛选的 优先考虑使用分组前筛选 (性能问题)二： GROUP BY 字句支持单个字段分组，多个字段分组（字段顺序无要求），表达式或函数(使用较少)三： 也可以添加排序(放在整个分组查询的最后) 简单使用引入：查询每个部门的平均工资 select avg(salary) from employees; select department_id as 部门编号,avg(salary) as 平均工资 from employees GROUP BY department_id; 案例一：查询每个工种的最高工资select MAX(salary),job_id from employees GROUP BY job_id; 案例二：查询每个位置上的部门个数select location_id, COUNT(*) from departments GROUP BY location_id; 添加筛选条件案例一：查询邮箱中包含a字符的每个部门的平均工资SELECT avg(salary) ,department_id from employees WHERE email like &#39;%a%&#39; GROUP BY department_id; 案例二：查询有奖金的每个领导手下员工的最高工资select max(salary) ,manager_id from employees where commission_pct is not NULL GROUP BY manager_id; 添加复杂的筛选条件案例一：查询哪个部门的员工个数大于二首先查询每个部门的员工个数 再对查询结果进行筛选 select * from( select department_id, COUNT(*) as 员工个数 FROM employees GROUP BY department_id ) as tt where tt.`员工个数`&gt;2; select department_id, COUNT(*) as 员工个数 FROM employees GROUP BY department_id HAVING 员工个数&gt;2 案例三：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和其最高工资首先 查询每个工种有奖金的员工的最高工资 在进行筛选 select job_id,MAX(salary) as 最高工资 from employees where commission_pct is not NULL GROUP BY job_id HAVING 最高工资&gt;12000; 案例四：查询领导编号&gt;102 的每个领导手下的最低工资&gt;5000的领导编号是哪个 以及其最低工资 select manager_id as 领导编号 , MIN(salary) as 最低工资 from employees where manager_id&gt;102 GROUP BY manager_id having 最低工资&gt;5000 按表达式或函数进行分组案例一：按员工姓名长度分组，查询每一组的员工个数 筛选员工个数&gt;5的有那些select LENGTH(last_name) 员工姓名长度 , COUNT(*) 员工个数 from employees GROUP BY 员工姓名长度 having 员工个数&gt;5; 按多个字段分组案例一：查询每个部门 每个工种的员工的平均工资 select AVG(salary) as 平均工资, department_id, job_id from employees GROUP BY department_id,job_id; 添加排序案例一：查询每个部门 每个工种的员工的平均工资 并按工资高低进行排序 select AVG(salary) as 平均工资, department_id, job_id from employees WHERE department_id is not null GROUP BY department_id,job_id ORDER BY 平均工资 DESC; 作业：作业一：查询各job-id的员工的工资最大值、最小值、平均值、总和并按job_id升序SELECT job_id , MAX(salary) 工资最大值 , MIN(salary) 工资最小值, AVG(salary) 工资平均值, SUM(salary) 工资总和 from employees group by job_id ORDER BY job_id ASC; 作业二：查询员工最高工资和最低工资的差距（DIFFRENCE）SELECT MAX(salary )- MIN(salary) as diffrence, department_id from employees GROUP BY department_id; 作业三：查询各个管理者手下员工的最低工资，其中 最低工资不能低于6000 没有管理者的员工不计算在内select MIN(salary) 最低工资 ,department_id from employees where department_id is not null GROUP BY department_id HAVING 最低工资&gt;=6000 作业四：查询所有部门的编号 员工数量和工资平均值 并按工资降序 SELECT department_id,COUNT(*), ROUND(avg(salary),2) 工资平均值 from employees GROUP BY department_id ORDER BY 工资平均值 DESC; 作业五：选择具有各个job_id的员工个数SELECT job_id ,COUNT(*) from employees GROUP BY job_id;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-分组函数","slug":"MySQL基础-DQL-分组函数","date":"2020-07-24T08:52:48.000Z","updated":"2020-07-24T09:09:53.806Z","comments":true,"path":"2020/07/24/MySQL基础-DQL-分组函数/","link":"","permalink":"http://yoursite.com/2020/07/24/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0/","excerpt":"","text":"分组函数功能：用作统计使用，又称为聚合函数或统计函数或组函数 分类：SUM(expr) 求和AVG([DISTINCT] expr) 平均值MAX(expr) 最大值MIN(expr) 最小值COUNT(DISTINCT expr,[expr…]) 计算个数 特点：1.其中，sum、avg一般处理数值类型,max、min、count计算个数2.以上分组函数都忽略null值3.可以和distinct搭配实现去重4.count函数的单独介绍一般使用count(*)统计函数5.和分组函数一同查询的字段要求是group by 后面的字段 1.简单使用select SUM(salary) as 工资总计FROM employees; SELECT avg(salary) as 工资平均值from employees; select MAX(salary) as 工资最大值FROM employees; SELECT MIN(salary) as 工资最小值from employees; SELECT COUNT(salary) as 工资数from employees; SELECT SUM(salary) as 和, ROUND(avg(salary),2) 平局值, MAX(salary) 最大值, MIN(salary) 最小值, count(salary) 总数from employees; 2.参数类型：支持类型select SUM(last_name), avg(last_name)FROM employees; select SUM(hiredate), avg(hiredate)FROM employees; SELECT MAX(last_name) ,MIN(last_name)from employees;SELECT MAX(hiredate) ,MIN(hiredate)from employees; select count(last_name) from employees;select count(commission_pct) from employees; 3.是否忽略null值SELECT SUM(commission_pct) as 和, avg(commission_pct) 平局值, SUM(commission_pct)/35, SUM(commission_pct)/107, MAX(commission_pct) 最大值, MIN(commission_pct) 最小值, count(commission_pct) 总数from employees; 4.和distanct 搭配使用select SUM(DISTINCT salary) , sum(salary) from employees;select count(DISTINCT salary) , count(salary) from employees; 5.count 函数详细介绍select COUNT(salary ) from employees;select count(*) from employees;select count(1) from employees; 效率：myisam 存储引擎下(5.5以前使用)： count()效率最高innodb 存储引擎下： count()和count(1)效率差不多 比count（字段）要高一些 6.和分组函数一同查询的字段有限制select avg(salary) , salary from employees; 作业作业一：查询员工表中的 最大入职时间和最小入职时间的相差天数select DATEDIFF(MAX(hiredate),MIN(hiredate)) as REFERENCE from employees;select datediff(NOW(),’1996-9-29’); SELECT DATEDIFF(‘2020-7-1’,’2020-7-21’); 作业二：查询部门编号为90的员工个数select count(*) from employees where department_id = 90;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-常见其它函数","slug":"MySQL基础-DQL-常见其它函数","date":"2020-07-24T07:40:53.000Z","updated":"2020-07-24T08:04:31.204Z","comments":true,"path":"2020/07/24/MySQL基础-DQL-常见其它函数/","link":"","permalink":"http://yoursite.com/2020/07/24/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%B8%B8%E8%A7%81%E5%85%B6%E5%AE%83%E5%87%BD%E6%95%B0/","excerpt":"","text":"四：其它函数VERSION()查看版本号select version() as out_put; DATABASE()查看数据库select DATABASE() as out_put; USER`() 查看当前用户select USER() 五：流程控制函数1.if 函数： if else 的效果select if(10&gt;5,&#39;大&#39;,&#39;小&#39;); 查询员工是否有奖金select last_name as 姓名, if(commission_pct is null,&#39;有奖金&#39;,&#39;没有奖金&#39;) as 奖金情况 from employees; 2.case 函数的使用一：switch case 效果java 中switch(变量或表达式) case 常量1:表达式 break; case 常量2:表达式 break; case 常量3:表达式 break; … default ：语句n break; mysql中case 要判断的字段或者表达式when 常量1 then 值1或语句1;when 常量2 then 值2或语句2;when 常量3 then 值3或语句3;…else 要显示的值n或者语句n;end 查询员工的工资部门号=30 ，显示的工资为1.1倍部门号=40 ，显示的工资为1.2倍部门号=50 ，显示的工资为1.3倍其他部门为原工资 SELECT department_id, salary as 原始工资, case department_id when 30 then salary*1.1 when 40 then salary*1.2 when 50 then salary*1.3 else salary end as 新工资 from employees; 3.case 函数的使用二：类似于多重ifjava 中if(条件1){ 语句1;}else if(条件2){ 语句2;}else if(条件3){ 语句3;}…else{ 语句n;} mysql中casewhen 条件1 then 要显示的值1 或语句1when 条件2 then 要显示的值2 或语句2…else 要显示的值n 或语句nend 案例： 查询员工的工资情况如果工资&gt;20000 显示A级别如果工资&gt;15000 显示B级别如果工资&gt;10000 显示C级别否则 显示D级别 select salary as 工资, CASE when salary&gt;20000 then &#39;A&#39; when salary&gt;15000 then &#39;B&#39; when salary&gt;10000 then &#39;C&#39; else &#39;D&#39; end as 工资级别 from employees; 字符函数： LENGTH CONCAT substr instr trim upper lower lpad rpad replace 数学函数 round ceil floor truncate MOD 日期函数 now curdate curtime year month monthname day hour minute second str_to_date date_format 其他函数 VERSION() DATABASE user IF case 作业作业一：select NOW(); 作业二： 查询员工号 、姓名、工资 ，以及工资提高20%后的结果select employee_id as 员工号, CONCAT(last_name,&#39; &#39;,first_name) as 姓名, salary as 工资, salary * 1.2 as 新工资 from employees; 作业三：将员工姓名按首字母排序(与姓名排序是不一样的) 并写出姓名的长度select LENGTH(last_name) as 姓名长度, last_name as 姓名 FROM employees ORDER BY SUBSTR(last_name,1,1) asc; 作业四：做一个查询产生下面的结果 earns monthly but wants &lt;salary*3&gt;Dream salaryKing earns 24000 monthly but wants 72000 select CONCAT(last_name,&#39; earns &#39;,salary,&#39; monthly but wants &#39;,salary*3) as &#39;Dream salary&#39; from employees where salary &lt;=&gt; 24000; 作业五：按照下面的条件使用case WHEN​ job grade​ AD_PRES A​ ST_MAN B​ IT_PROG C select job_id as job, case when job_id=&#39;AD_PRES&#39; then &#39;A&#39; when job_id=&#39;ST_MAN&#39; then &#39;B&#39; when job_id=&#39;IT_PROG&#39; then &#39;C&#39; else &#39;级别未知&#39; end as grade from employees","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-常见日期函数","slug":"MySQL基础-DQL-常见日期函数","date":"2020-07-24T07:40:26.000Z","updated":"2020-07-24T08:09:25.330Z","comments":true,"path":"2020/07/24/MySQL基础-DQL-常见日期函数/","link":"","permalink":"http://yoursite.com/2020/07/24/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%B8%B8%E8%A7%81%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0/","excerpt":"","text":"三：日期函数 1.now 返回当前系统日期+时间select NOW(); 2.curdate 返回当前系统日期select CURDATE 3.curtime 返回当前系统时间select CURTIME(); 4.可以获取指定的部分 年、月、日 、小时、分钟、秒select year(NOW()); select year(&#39;2020-3-24&#39;); select year(hiredate) from employees; select month(NOW()); select monthname(NOW()); 5.str_to_date 将日期字符串转为指定的格式的日期select str_to_date(hiredate,&#39;%Y-%c-%d&#39;) as out_put from employees; 查询入职日期为1992-4-3的员工select * FROM employees WHERE hiredate &lt;=&gt; &#39;1992-4-3&#39;; select * FROM employees WHERE hiredate &lt;=&gt; str_to_date(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;); 6.date_fromat 将日期转换为指定格式字符串select date_format(NOW(),&#39;%Y年%c月%d日&#39;); 查询有奖金的员工名和入职日期(月/日 年)select last_name as 姓名, date_format(hiredate,&#39;%c月/%d日 %y年&#39;) as 入职日期 from employees;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-常见数学函数","slug":"MySQL基础-DQL-常见数学函数","date":"2020-07-24T07:39:43.000Z","updated":"2020-07-24T07:44:30.120Z","comments":true,"path":"2020/07/24/MySQL基础-DQL-常见数学函数/","link":"","permalink":"http://yoursite.com/2020/07/24/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%B8%B8%E8%A7%81%E6%95%B0%E5%AD%A6%E5%87%BD%E6%95%B0/","excerpt":"","text":"二 .数学函数1.round 四舍五入select ROUND(1.454); select round(-1.65); SELECT ROUND(1.3548,2); 2.ceil 向上取整 返回大于等于改参数的最小整数select ceil(1.23); SELECT CEIL(-1.99); 3.floor 向下取整 返回小于等于该参数的最大整数select FLOOR(1.02); 4.TRUNCATE 截断select TRUNCATE(1.988524,3) as out_put; 5.mod 取余select MOD(10,3); select mod(-10,3); select mod(10,-3); select 10%3; a - a/b*b;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-常见字符函数","slug":"MySQL基础-DQL-常见字符函数","date":"2020-07-22T10:56:49.000Z","updated":"2020-07-22T11:05:40.402Z","comments":true,"path":"2020/07/22/MySQL基础-DQL-常见字符函数/","link":"","permalink":"http://yoursite.com/2020/07/22/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%B8%B8%E8%A7%81%E5%AD%97%E7%AC%A6%E5%87%BD%E6%95%B0/","excerpt":"","text":"常见函数概念：类似于java中的方法，将实现某个功能的一组逻辑语句封装直接调用，隐藏了功能的实现细节，对外暴露方法名好处：1.隐藏了实现细节、2.提高了代码的重用调用：select 函数名（实参列表） 【from 表】特点： 1.函数名 2.函数功能分类： 1.单行函数 concat、length、ifnull 字符函数 数学函数 日期函数 其他函数 流程控制函数如（java中switch） 2.分组函数 功能:做统计使用，又称为统计函数、组合函数、聚合函数 一：字符函数：1.length 获取参数的字节数select LENGTH(&quot;hello&quot;); select LENGTH(&quot;你好&quot;); show VARIABLES like &#39;%char%&#39;; 2.concat 拼接字符串SELECT CONCAT(last_name,&#39; &#39;,first_name) from employees; 3.UPPER 、lower select UPPER(&#39;hello&#39;); select lower(&#39;HELLO&#39;); #实例：将姓变大写 名变小写 然后拼接 select CONCAT(UPPER(last_name),&#39; &#39;,LOWER(first_name)) as 姓名 from employees 4.SUBSTR SUBSTRING(str FROM pos FOR len) 截取字符串 索引从1开始截取从指定索引处后面所有字符 select SUBSTR(&#39;李莫愁&#39;,2) out_put; 截取从指定索引处后面指定长度字符 select SUBSTR(&#39;李莫愁&#39; , 1 ,2) out_put; 案例 将姓名中首字符大写其它字符小写 select CONCAT(UPPER(SUBSTRING(last_name,1,1)),LOWER(SUBSTR(last_name,2))) as out_put FROM employees 5.INSTR 返回字串第一次出现的索引,如果找不到 返回0select INSTR(&#39;张三丰张无忌和张无忌&#39;,&#39;张无忌&#39;) as out_put; 6.trim 出去多余的空格或前后字符SELECT TRIM(&#39; 张翠山 &#39;) as out_put; SELECT length(TRIM(&#39; 张翠山 &#39;)) as out_put; select TRIM(&#39;a&#39; from &#39;aaaaaaaaaaaaaaa张aaaa翠山aaaaa&#39;)as out_put 7.lpad 用指定的字符实现左填充指定长度select lpad(&#39;殷素素&#39;,10,&#39;*&#39;) as out_put; select lpad(&#39;殷素素&#39;,2,&#39;*&#39;) as out_put; 8.RPAD 用指定的字符实现右填充指定长度select RPAD(&#39;君不见高堂明镜悲白发&#39;,15,&#39;*&#39;) as out_put; select RPAD(&#39;君不见高堂明镜悲白发&#39;,8,&#39;*&#39;) as out_put; 9.REPLACE 用指定的字符串去替换指定的字符串select REPLACE(&#39;李白和汪伦是好友&#39;,&#39;汪伦&#39;,&#39;杜甫&#39;) as out_put;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-排序查询","slug":"MySQL基础-DQL-排序查询","date":"2020-07-22T09:53:55.000Z","updated":"2020-07-22T10:02:26.599Z","comments":true,"path":"2020/07/22/MySQL基础-DQL-排序查询/","link":"","permalink":"http://yoursite.com/2020/07/22/MySQL%E5%9F%BA%E7%A1%80-DQL-%E6%8E%92%E5%BA%8F%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"MySQL排序_DQL示例表员工表：员工编号、名、姓 、邮箱、电话号码、工种编号、薪水、奖金率、上级领导员工编号、部门编号、入职日期 部门表：部门编号、部门名称、部门领导的员工编号、位置编号 位置表：位置编号、街道、邮编、城市、省份、国家编号 工种表：工种编号、工种名称、最低工资、最高工资 排序查询1、引入 select * from employees;2、语法 select 查询列表 from 表 where 筛选条件 order by 排序列表【asc | desc】 3、特点： 1.asc代表升序 desc 代表降序 不写默认升序 2.order by 字句中可以支持单个字段、多个字段、表达式、函数、别名 3.order by 字句一般放在查询语句的最后面，但limit子句除外 案例一：查询员工信息 工资从高到低实现排序select * from employees ORDER BY salary desc; select * from employees ORDER BY salary asc; 案例二：查询部门编号大于等于90的员工信息，按入职时间先后进行排序select * FROM employees where department_id&gt;=90 ORDER BY hiredate asc; 案例三：按表达式排序 按员工的年薪高低显示员工的年薪和信息SELECT *, salary * 12 *(1+IFNULL(commission_pct,0)) as 年薪 FROM employees ORDER BY salary * 12 *(1+IFNULL(commission_pct,0)) desc; 案例四：按别名排序SELECT *, salary * 12 *(1+IFNULL(commission_pct,0)) as 年薪 FROM employees ORDER BY 年薪 desc; 案例五：按姓名长度显示员工的姓名和工资【按函数排序】SELECT LENGTH(last_name) as 姓名长度, last_name as 姓名, salary as 工资 from employees ORDER BY 姓名长度 asc; 案例六：查询员工信息，先按工资升序排序再按员工编号降序排序【按多个字段排序】也就说 按工资排序 工资一样的时候 在按员工编号降序排序select salary as 员工工资, employee_id as 员工编号 FROM employees ORDER BY salary asc, employee_id desc; 案例四：按别名排序SELECT *, salary * 12 *(1+IFNULL(commission_pct,0)) as 年薪 FROM employees ORDER BY 年薪 desc; 案例四：按别名排序SELECT *, salary * 12 *(1+IFNULL(commission_pct,0)) as 年薪 FROM employees ORDER BY 年薪 desc; 案例四：按别名排序SELECT *, salary * 12 *(1+IFNULL(commission_pct,0)) as 年薪 FROM employees ORDER BY 年薪 desc; 作业测试#测试一：查询员工的姓名、部门号 和年薪 按年薪降序、姓名升序 SELECT last_name as 姓名, department_id as 部门号, salary*12*(1+IFNULL(commission_pct,0)) 年薪 from employees ORDER BY 年薪 desc , 姓名 asc; #测试二：选择工资不在8000到17000的员工工资和姓名，按工资降序 SELECT salary as 工资, last_name as 姓名 FROM employees WHERE salary not BETWEEN 8000 and 17000 ORDER BY salary desc; #测试三：查询邮箱中包含e的员工信息，并先按邮箱的字节数降序，再按部门号升序 SELECT *, LENGTH(employees.email) as 邮箱字节数 FROM employees WHERE email like &#39;%e%&#39; ORDER BY 邮箱字节数 desc ,department_id asc;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础-DQL-条件查询","slug":"MySQL基础-DQL-条件查询-1","date":"2020-07-22T09:53:19.000Z","updated":"2020-07-22T09:53:19.047Z","comments":true,"path":"2020/07/22/MySQL基础-DQL-条件查询-1/","link":"","permalink":"http://yoursite.com/2020/07/22/MySQL%E5%9F%BA%E7%A1%80-DQL-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2-1/","excerpt":"","text":"","categories":[],"tags":[{"name":"xxx","slug":"xxx","permalink":"http://yoursite.com/tags/xxx/"}]},{"title":"MySQL基础-DQL-条件查询","slug":"MySQL基础-DQL-条件查询","date":"2020-07-22T08:39:36.000Z","updated":"2020-07-22T08:40:39.670Z","comments":true,"path":"2020/07/22/MySQL基础-DQL-条件查询/","link":"","permalink":"http://yoursite.com/2020/07/22/MySQL%E5%9F%BA%E7%A1%80-DQL-%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"MySQL条件_DQL示例表员工表：员工编号、名、姓 、邮箱、电话号码、工种编号、薪水、奖金率、上级领导员工编号、部门编号、入职日期 部门表：部门编号、部门名称、部门领导的员工编号、位置编号 位置表：位置编号、街道、邮编、城市、省份、国家编号 工种表：工种编号、工种名称、最低工资、最高工资 条件查询进阶一：条件查询#进阶2：条件查询 /* 语法： select 查询列表 from 表名 where 筛选条件 分类： 一、按条件表达式筛选 简单条件运算符 &lt; &gt; !=(&lt;&gt;) &lt;= &gt;= 二、按逻辑表达式筛选 逻辑运算符: &amp;&amp; || ! and or not 作用：用于连接条件表达式 三、模糊查询 like between and in is null */ 1. 简单条件运算符&lt; &gt; = &lt;&gt; &lt;=&gt; 安全等于 &lt;= &gt;= #案例一：查询员工工资大于12000的员工信息 select * from employees where employees.salary&gt;12000 #案例二：查询部门编号不等于90号的员工名 和 部门编号 select employees.department_id as 部门编号 ,CONCAT(employees.first_name,&#39; &#39;,employees.last_name) as 姓名 from employees where employees.department_id &lt;&gt; 90 2. 逻辑运算符查询and or not #案例一：工资在10000 到 20000 之间的员工名 、 工资 以及 奖金 select CONCAT(employees.first_name,&#39;.&#39;,last_name) as 姓名, employees.salary as 工资, employees.commission_pct as 奖金 from employees WHERE salary&gt;=10000 and salary&lt;=20000 # 案例二：查询部门编号不是在90到110之间 ， 或者工资高于15000的 员工信息 select * from employees where not (department_id&gt;=90 and department_id&lt;=110) or salary&gt;15000 3. 模糊查询like betweent and is null is nut null like 一般搭配通配符使用，用于判断字符型和数值型, 通配符：%任意多个字符 _任意单个字符 # 三：模糊查询 /* 1.like : 特点：①一般和通配符搭配使用 通配符：% 任意多个字符（包含0个字符） _ 任意单个字符 */ # 案例一：查询员工名中包含字符a的员工信息 select * from employees where last_name LIKE &#39;%a%&#39; #案例二： 查询员工名中第三个字符为e 第五个字符 为a 的员工名和工资 select last_name as 员工名 , salary as 薪水 from employees where last_name like &#39;__n_l%&#39; #案例三：查询员工名中第二个字符为_的员工名 使用转义字符 select last_name from employees WHERE last_name like &#39;_$_%&#39; ESCAPE &#39;$&#39; #2. between and /* 使用between and能提高语句的简洁度 两个临界值的大小顺序不能变换 */ #案例一：查询员工编号在100 到 120 之间的员工信息 select * from employees where employee_id BETWEEN 100 and 120 #三 in：判断某字段的值是否为列表中的某一项 使用in提高语句的简洁度 in列表的值类型 必须统一或兼容 #案例一：查询员工的工种编号是 IT_PROG AD_VP 、 AD_PRES中的一个员工名和工种编号 SELECT last_name as 姓名, job_id as 工种编号 from employees where job_id in(&#39;IT_PROG&#39;,&#39;AD_VP&#39;,&#39;AD_PRES&#39;) # 4. is null 的使用 : 使用等于号(或不等号)不能判断 null 值 #案例一：查询没有奖金的员工名 和 奖金率 select last_name, commission_pct from employees where commission_pct is not null # 安全等于：&lt;=&gt; /* */ select last_name, commission_pct from employees where commission_pct &lt;=&gt; null; select last_name, commission_pct from employees where commission_pct &lt;=&gt; 0.4; #is null 对比 &lt;=&gt; is null :仅可以判断null的值 可读性较好 &lt;=&gt;: 既可以判断null值 又可以判断普通值 可读性较差 ; #案例：查询员工号为176的员工的部门号 姓名和 年薪 select last_name as 姓名, employees.department_id as 部门号, salary*12*(1+IFNULL(commission_pct,0)) as 年薪 from employees where employee_id &lt;=&gt; 176 经典面试题经典面试题： select * from employees 和 select * from employees where commission_pct like &#39;%%&#39; and last_name like &#39;%%&#39; 结果是否一致? 不一致：如果判断的字段值有null 则造成结果丢失 如果用or 有字段必不为空则可以","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础_DQL_基础查询","slug":"MySQL基础-DQL-基础查询","date":"2020-06-03T12:05:35.000Z","updated":"2020-07-22T08:21:59.972Z","comments":true,"path":"2020/06/03/MySQL基础-DQL-基础查询/","link":"","permalink":"http://yoursite.com/2020/06/03/MySQL%E5%9F%BA%E7%A1%80-DQL-%E5%9F%BA%E7%A1%80%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"MySQL基础_DQL示例表员工表：员工编号、名、姓 、邮箱、电话号码、工种编号、薪水、奖金率、上级领导员工编号、部门编号、入职日期 部门表：部门编号、部门名称、部门领导的员工编号、位置编号 位置表：位置编号、街道、邮编、城市、省份、国家编号 工种表：工种编号、工种名称、最低工资、最高工资 基础查询进阶一：基础查询/* SELECT 查询列表FROM 表; 特点： 查询列表可以为：表中的字段、常量值、表达式、函数 查询的结果为一个虚拟表格 */ use myemployees;1.查询单个字段select last_name from employees;2.查询表中的多个字段select last_name,salary,email from employees;3.查询表中的所有字段select * from employees;4.查询常量值select 100; select &#39;你好啊&#39;;5.查询表达式select 100*158*98; select 100%92;6.查询函数select VERSION();7.为字段取别名/* 便于理解 如果要查询的字段有重名的情况，使用别名可以区分开来 */方式一：使用asselect 100*98 AS 结果; SELECT last_name AS 姓, first_name AS 名 from employees;方式二：使用空格SELECT last_name 姓, first_name 名 from employees;案例：查询salary 显示结果为out put(加上双引号或着重符号)select salary `out put` from employees; select salary &quot;out put&quot; from employees;8.去重案例：查询员工表中涉及的所有部门编号select department_id from employees; select distinct department_id from employees;9.+的作用/* mysql 中的+只为运算符 select 100+90; 两个操作数都为数值型，则做加法运算 select &#39;100&#39; + 90; 其中一方为字符型，试图将字符型数值转为数值型， select &#39;100&#39; + 90; 如果转换成功则，继续做加法运算. select &#39;jone&#39; + 90; 若失败，则将字符型转换为0 select null+10; 只要其中一方为null则结果肯定为null */案例；查询员工名和姓连接成一个字段，并显示为 姓名 concat 函数select last_name+first_name as 姓名 from employees select CONCAT(last_name,&#39; &#39;,first_name) as 姓名 from employees desc departments; SELECT * from departments; select * from employees; select DISTINCT(job_id) from employees;此处 commission_pct 为 null 则结果为nullselect CONCAT(employees.employee_id,&#39;,&#39;,employees.first_name,&#39;,&#39;,employees.last_name,&#39;,&#39;, employees.salary,&#39;,&#39;,employees.phone_number,&#39;,&#39;,employees.manager_id,&#39;,&#39;, employees.job_id,&#39;,&#39;,employees.hiredate,&#39;,&#39;,employees.email ) as &quot;out_put&quot; from employees;判断是否为nullselect IFNULL(employees.commission_pct,0) AS 奖金率 from employees; select CONCAT(employees.employee_id,&#39;,&#39;,employees.first_name,&#39;,&#39;,employees.last_name,&#39;,&#39;, employees.salary,&#39;,&#39;,employees.phone_number,&#39;,&#39;,employees.manager_id,&#39;,&#39;, employees.job_id,&#39;,&#39;,employees.hiredate,&#39;,&#39;,employees.email,&#39;,&#39;,IFNULL(employees.commission_pct,0) ) as &quot;out_put&quot; from employees;补充isnull函数 功能：判断某字段的值是否为null 如果为null 返回1 否则返回0.","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"MySQL基础_MySQL常见命令","slug":"MySQL基础-MySQL常见命令-1","date":"2020-06-03T12:04:48.000Z","updated":"2020-06-03T12:04:48.949Z","comments":true,"path":"2020/06/03/MySQL基础-MySQL常见命令-1/","link":"","permalink":"http://yoursite.com/2020/06/03/MySQL%E5%9F%BA%E7%A1%80-MySQL%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4-1/","excerpt":"","text":"","categories":[],"tags":[{"name":"xxx","slug":"xxx","permalink":"http://yoursite.com/tags/xxx/"}]},{"title":"MySQL基础_MySQL常见命令","slug":"MySQL基础-MySQL常见命令","date":"2020-06-03T11:53:12.000Z","updated":"2020-06-03T12:03:36.876Z","comments":true,"path":"2020/06/03/MySQL基础-MySQL常见命令/","link":"","permalink":"http://yoursite.com/2020/06/03/MySQL%E5%9F%BA%E7%A1%80-MySQL%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/","excerpt":"","text":"数据库的好处1.持久化数据到本地 2.可以实现结构化查询，方便管理数据库相关概念1、DB：数据库，保存一组有组织的数据的容器 2、DBMS：数据库管理系统，又称为数据库软件（产品），用于管理DB中的数据 3、SQL:结构化查询语言，用于和DBMS通信的语言数据库存储数据的特点1、将数据放到表中，表再放到库中 2、一个数据库中可以有多个表，每个表都有一个的名字，用来标识自己。表名具有唯一性。 3、表具有一些特性，这些特性定义了数据在表中如何存储，类似java中 “类”的设计。 4、表由列组成，我们也称为字段。所有表都是由一个或多个列组成的，每一列类似java 中的”属性” 5、表中的数据是按行存储的，每一行类似于java中的“对象”。mysql 服务的启动和停止启动 net start mysql 停止 net start mysqlmysql 服务的登录和退出方式一：通过mysql自带的客户端 只限于root用户 方式二：通过windows自带的客户端（命令行 管理员启动） 登录： mysql 【-h 主机名 -P端口号】-u 用户名 -p密码 退出：exit 或Ctrl + Cmysql 常见命令1.查看当前所有的数据库 show databases; 2.打开指定的库 use 库名 3.查看当前所有的表 show tables; 4.查看其它库的所有表 show tables from 库名; 5.创建表 create table（ 列名 列类型， 列名 列类型 ... ）; 6.查看表结构 desc 表名 7.查看服务器的版本 方式一：登录到mysql服务端 select version（）； 方式二：没有登录到mysql服务端 mysql --version 或 mysql --Vmysql的语法规范1.不区分大小写，但建议关键字大写，表名、列名小写 2.每条命令结尾最好用分号 3.每条命令根据需要，可以进行缩进 或换行 4.注释 单行注释：#注释文字 -- 注释文字 多行注释：/*注释文字....*/SQL的语言分类DQL（Data Query Language）：数据查询语言 select DML(Data Manipulate Language):数据操作语言 insert 、update、delete DDL（Data Define Languge）：数据定义语言 create、drop、alter TCL（Transaction Control Language）：事务控制语言 commit、rollback","categories":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"mysql","slug":"mysql","permalink":"http://yoursite.com/tags/mysql/"}]},{"title":"粗略MVC设计模式一","slug":"粗略MVC设计模式一","date":"2020-02-20T10:43:04.000Z","updated":"2020-02-20T11:39:42.913Z","comments":true,"path":"2020/02/20/粗略MVC设计模式一/","link":"","permalink":"http://yoursite.com/2020/02/20/%E7%B2%97%E7%95%A5MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%80/","excerpt":"","text":"粗略MVC设计模式一 以点击超链接查询所有的学生为例 示列代码&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;a href=&quot;getallstudentservlet&quot;&gt;获得所有学生名单&lt;/a&gt; &lt;/body&gt; &lt;/html&gt; package mvctry; import java.io.IOException; import java.util.Arrays; import javax.servlet.ServletException; import javax.servlet.annotation.WebServlet; import javax.servlet.http.HttpServlet; import javax.servlet.http.HttpServletRequest; import javax.servlet.http.HttpServletResponse; import dal.UserDal; /** * Servlet implementation class GetAllStudentServlet */ @WebServlet(&quot;/getallstudentservlet&quot;) public class GetAllStudentServlet extends HttpServlet { private static final long serialVersionUID = 1L; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // TODO Auto-generated method stub //response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath()); UserDal userdal = new UserDal(); request.setAttribute(&quot;students&quot;,userdal.getalluser()); request.getRequestDispatcher(&quot;/allstudent.jsp&quot;).forward(request, response); } } &lt;%@page import=&quot;module.User&quot;%&gt; &lt;%@page import=&quot;java.util.List&quot;%&gt; &lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt; &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Insert title here&lt;/title&gt; &lt;/head&gt; &lt;body&gt; allstudent:&lt;br&gt;&lt;/br&gt; &lt;% List&lt;User&gt; users = (List)request.getAttribute(&quot;students&quot;); for(User user : users){ out.print(&quot;账号：&quot;+user.getAccount()+&quot; 密码：&quot;+user.getPassword()+&quot; 用户名：&quot;+user.getUsername()); out.print(&quot;&lt;br&gt;&quot;); } %&gt; &lt;table border=&quot;1&quot; cellpadding=&quot;10&quot; cellspacing=&quot;0&quot;&gt; &lt;tr&gt; &lt;th&gt;账号&lt;/th&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;密码&lt;/th&gt; &lt;th&gt;Delete &lt;/th&gt; &lt;/tr&gt; &lt;% for(User user:users){ %&gt; &lt;tr&gt; &lt;td&gt;&lt;%=user.getAccount() %&gt;&lt;/td&gt; &lt;td&gt;&lt;%=user.getUsername() %&gt;&lt;/td&gt; &lt;td&gt;&lt;%=user.getPassword() %&gt;&lt;/td&gt; &lt;td&gt;&lt;a href=&quot;deleteservlet?useraccount=&lt;%=user.getAccount()%&gt;&quot; &gt;Delete&lt;/a&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% } %&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; 关于MVC M：module V： view jsp在界面上编写java代码 C: controller servlet 受理请求，获取请求参数调用dao方法转发（重定向页面） 受理请求 获取请求参数 调用DAO方法 可能会把DAO方法的返回值放入request中 转发或重定向 何时转发 何时重定向若目标的响应界面不需要从request中读取任何值则可以重定向（还可以防止表单的重复提交） 不足 一个请求一个servlet不好！一个模块使用一个servlet，即多个请求可以使用一个servlet 使用数据库连接池，DButils,JDBCUtils 工具类 DAO基类 在页面上加入jQuery提示","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"},{"name":"MVC","slug":"MVC","permalink":"http://yoursite.com/tags/MVC/"},{"name":"javaweb","slug":"javaweb","permalink":"http://yoursite.com/tags/javaweb/"}]},{"title":"jsp简介","slug":"jsp简介","date":"2020-02-17T08:41:12.000Z","updated":"2020-02-17T09:57:53.894Z","comments":true,"path":"2020/02/17/jsp简介/","link":"","permalink":"http://yoursite.com/2020/02/17/jsp%E7%AE%80%E4%BB%8B/","excerpt":"","text":"JSP(java server page)java服务器端网页，在HTML页面中写java代码的页面 JSP简介： JSP是简化Servlet编写的一种技术，它将java代码和HTML语句混合在同一个文件中编写，只对网页中的要动态产生的内容采用java代码编写，而对固定不变的静态内容采用普通的静态HTML页面的方式编写。 jsp中的代码应该放在body节点下的&lt;%%&gt;中 jsp可以放在web应用程序中除 WEB-INFO的其它任何目录中，jsp的访问格式也与html页面的访问格式完全相同(并不是完全不能，只是不建议，由于该目录下主要放的是一些隐私文件) jsp 运行原理： jsp本质上是一个servlet，jsp程序先编译为servlet文件 然后再进行编译，因此servlet的大部分方法在jsp程序中也能使用。 jsp的9个隐含对象jsp页面的隐含对象一共有9个,隐含对象不需经申明就可以直接使用 1234567891. &lt;font color&#x3D;&quot;red&quot;&gt;request&lt;&#x2F;font&gt;: 为HttpServeletRequest对象 2. response：为HttpServletResponse的对象，在jsp页面中几乎不会使用 3. &lt;font color&#x3D;&quot;red&quot;&gt;pageContext&lt;&#x2F;font&gt;：页面上下文为PageContext的对象，可以从该对象中获取到其它8个隐含对象和其它信息，学习自定义标签时使用 4. &lt;font color&#x3D;&quot;red&quot;&gt;session&lt;&#x2F;font&gt;：代表浏览器和服务器的一次对话，是HttpSession的对象 5. &lt;font color&#x3D;&quot;red&quot;&gt;application&lt;&#x2F;font&gt;: 代表当前应用，能获取当前应用的初始化参数（web.xml中的参数） 6. config：当前jsp对应的servlet的servletConfig对象，若需要访问当前配置的初始化参数需要通过映射来使用，开发的时候几乎不使用![](jsp简介2020_2_17&#x2F;2.png) 7. &lt;font color &#x3D;&quot;red&quot;&gt;out&lt;&#x2F;font&gt;: jspWriter对象，经常使用out.println() 直接将字符串打印到浏览器上 8. page: 指当前jsp对应的servlet对象的引用，但是为Object对象，开发时不使用 9. exception 注意使用exception时必须声明： 以上9个隐含对象均可以在jsp的java代码中使用. pageContext request session application 对属性的作用域范围从小到大 out response config page exception jsp语法jsp中的模板元素jsp中的静态HTML内容 jsp表达式jsp表达式提供了一个将java变量或计算结果输出到客户端的简化方式，它将要输出的变量或表达式直接放在&lt;%= %&gt; 中 jsp脚本片段jsp中的java代码，一个jsp 页面中可以有多个脚本片段，多个脚本片段之间可以相互访问 jsp申明 脚本片段实际上是在方法里的，所以需要声明。jsp申明将java代码封装在&lt;%! %&gt;之中，它里面的代码将被插入到servlet中_jspService方法的外面，不过在jsp页面中，几乎从不使用 jsp注释&lt;%– –%&gt;它与HTML注释的区别是，它可以阻止java代码的执行 和属性相关的方法 方法 Object getAttribute（String name）：获取指定的属性 Enumeration getaAttributeNames（）:获取所有属性的名字组成的Enumeration对象 removeAttribute(String name): 移除指定的属性 void setAttribute（String name , OBject o）:设置属性 pageContext request seeeion application 对象都有这些方法，这四个对象也称之为域对象 pageContext：属性的作用范围仅限于当前jsp页面 request： 属性的作用范围仅限于同一个请求（在有转发的情况下可以跨页面获取当前属性值） session：属性的作用范围限于一次会话（浏览器打开直到关闭称之为一次关闭，在此期间会话不会失效） application：属性的作用范围限于当前web应用。是范围最大的属性作用范围，只要在一处设置属性，在其他各处的JSP或者Servlet中都可以获取到 请求的转发和重定向请求的转发 12345678910//1.请求的转发 /* * 1.调用httpServletRequest 的 getRequestDispatcher方法获取 RequestDispatcher对象 * 调用方法时 需要传入要转发的地址 * 2.调用HTTPServletRequest 的Forward（request，response）方法进行请求的转发. * */ String path = \"testservlet\"; RequestDispatcher requestdispatcher = request.getRequestDispatcher(\"/\"+path); requestdispatcher.forward(request, response); 请求的重定向 12345 //1.请求的重定向调用 response的SendRedirect（path） 方法 String path=\"testtwoservlet\"; response.sendRedirect(path);// 注意路径 本质区别 请求的转发是只发出一次请求，而重定向则发出了两次请求。 具体区别 请求的转发地址栏为初次请求的地址 重定向地址栏不再是除此请求发出的地址，是最后请求的地址 请求转发：在最终的servlet，request对象和中转的request对象是同一个 请求的重定向则不是 请求转发只能转发到当前web应用的资源，而重定向到任何资源 请求的转发：/ 代表当前web应用的根目录 ​ 请求的重定向： / 代表当前web站点的根目录 注意：http://localhost:8084/Day_2_16/a.jsp jsp指令12&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt; 以上为jsp指令，jsp指令只是告诉引擎如何处理jsp页面的其它部分 当前主要有page include taglib三种指令 page指令用于定义jsp页面的各种属性，无论page指令出现在哪，它作用的范围都是整个jsp页面，page指令一般放在jsp页面的起始位置 page指令用于定义jsp页面的各种属性，无论page指令出现在哪，它作用的范围都是整个jsp页面，page指令一般放在jsp页面的起始位置 如 【language=“java”】 【extends=”package.class”】 【session=”true|false”】 【isErrorPage=”true|false”】 【errorPage=”true|false”】 import指令：指定当前jsp页面要导入的类包 session指令：指定当前页面是否可用session变量，也可以说访问当前页面时是否可以生成httpsession对象 errorpage 和iserrorpage,errorpage 指定当前页面出现错误的实际响应页面时什么，其中/代表当前web应用的根目录，在响应errorpage时，服务器采用的是请求转发的方式 1&lt;%@ page errorPage=\"error.jsp\" %&gt; iserrorpage指定当前页面是否为错误处理页面，可以说明当前页面是否可以使用exception对象，一般建议错误页面不能够直接访问到错误页面（将当前页面放入 WEB-INF目录下），除此之外还可以在web.xml文件内配置错误页面 1234&lt;error-page&gt;&lt;!--指定错误代码响应，404找不到资源，500内部错误。。。 还可以安异常类型来指定。--&gt; &lt;error-code&gt;500&lt;/error-code&gt; &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt; &lt;/error-page&gt; 一般而言，WEB-INF下的文件是不能通过直接输入地址的形式来访问的，一般通过请求的转发来访问。 contenttype 指定当前警示牌页面的响应类型，实际调用的是response.setContentType(“text/html;charset:UTF-8”),通常情况下，对于jsp页面其取值均为“text/html;charset:UTF-8” charset指定返回的页面的字符编码是什么，通常取值UTF-8 pageEcoding 指定当前jsp页面的的字符编码，通常情况下也contentType中的charset的值一样。 isELIgnored 指定当前jsp页面是否可以使用EL表达式，通常取值为true include指令用于通知jsp引擎，在翻译当前jsp页面时，将其它文件的内容合并到当前jsp文件的servlet源文件中，当前jsp页面与静态引入的页面紧密结合为一个servlet 12345678&lt;b&gt;aaaaaaaaaaaaaaa&lt;/b&gt;&lt;%-- 在a.jsp中包含b.jsp file如无/ 则相对于当前文件 否则表示当前web应用的根目录--%&gt;&lt;%@ include file=\"b.jsp\"%&gt; 在a.jsp的源文件中已经包含b中的代码 jsp标签 jsp标签用于把另外一个元素的内容插入到当前jsp页面的输出内容之中，这种在jsp页面执行时的引入方法称之为动态引入 iclude 标签 1&lt;jsp:include page = \"b.jsp\"&gt;&lt;/jsp:include&gt; 动态引入：并不是像include指令一样生成一个servlet源文件，而是生成两个servlet源文件，然后通过一个方法的方式把另一个页面包含进来 include指令和jsp:include 标签 标签是在当前页面执行期间插入被引入的内容，被动态引入的资源必须是一个能独立被WEB容器调用和引用的资源 include只能引入遵循jsp格式的文件，被引入的文件与当前jsp文件共同翻译为一个servlet源文件 forward标签1&lt;jsp:forward page=\"b.jsp\"&gt;&lt;/jsp:forward&gt; 相当于请求的转发 123&lt;%request.getRequestDispatcher(\"/b.jsp\").forward(request,response);%&gt; 但是使用jsp forward标签可以使用jsp:param 向字标签传入一些参数，jsp:include 也可以 123&lt;jsp:forward page=\"b.jsp\"&gt;&lt;jsp:param value=\"abac\" name=\"username\"/&gt;&lt;/jsp:forward&gt; ​ 在b.jsp页面内可以通过request.getparamter(“username”)来获取传入的参数 jsp中文乱码问题 在jsp页面上输入中文，请求页面后不出现乱码：保证 charset和pageEncoding的值一致，且都支持中文，一般取值UTF-8,还需保证浏览器显示的字符编码也和请求的jsp页面的编码一致 获取中文参数值：默认参数在传输过程中使用的编码为ISO-8859-1 对于post请求，在获取请求信息之前，先调用request.setCharacterEncoding()即可 对于get请求，前面的方式无效，应采用先解码再进行编码的方式 可以通过修改tomcat的server.xml文件的方式 遇到的错误 tomcat 端口频繁被占用的问题 最有效直接的方法通过任务管理器结束java虚拟机进程 eclipse卡顿问题 关闭自动构建 关闭自动保存 经常出现配置servlet时 类路径正确但是抛异常找不到类 有未生成.class字节文件的可能 开启自动编译但是并没有自动编译 要说没有编译但是Web-INF/classes目录下已经有该文件 解决方法：更换编辑器一致性级别 重新编译 参考：https://blog.csdn.net/qq_21454973/article/details/79481197","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"}]},{"title":"HTML简介","slug":"HTML简介","date":"2020-01-10T10:00:10.000Z","updated":"2020-01-10T10:31:52.804Z","comments":true,"path":"2020/01/10/HTML简介/","link":"","permalink":"http://yoursite.com/2020/01/10/HTML%E7%AE%80%E4%BB%8B/","excerpt":"","text":"HTML是超文本标记语言。纯文本中，只能保存纯文本内容，图片，音频，视屏等内容都不能保存，网页为纯文本。 标准格式12345678910111213141516171819202122232425262728293031323334&lt;!doctype html&gt; &lt;!-- html版本声明 编写网页时， 一定要将h5的文档声明写在网页的最上端。避免有些浏览器无法解析该网页 --&gt; &lt;!-- html根标签，一个页面中只有一个根标签，网页中所有内容都在根标签中 --&gt;&lt;html&gt; &lt;!-- head标签用于帮助浏览器解析页面 --&gt; &lt;head&gt; &lt;!-- 标题，默认会显示在浏览器的标题栏中 搜索引擎在检索页面时，会首先检索title中的内容 它是网页中对于搜索引擎来说是最终要的内容，会影响在网页在搜索引擎中的排名 --&gt; &lt;title&gt;这个是我的第一个网页&lt;/title&gt; &lt;/head&gt; &lt;!-- 用于设置网页的主体内容，网页中所有可见的内容，都应该在body中编写 --&gt; &lt;body&gt; &lt;!--注释--&gt; &lt;!-- 属性： 可以通过属性来设置标签，如果处理标签中的可以在开始标签中添加属性 属性需要写在开始标签中，实际上是一个名值对的结构 一个标签中可以使用多个属性 属性名 = “属性值” --&gt; &lt;h1&gt;这是我的&lt;font color= \"lightblue\" size = \"6\"&gt;第一个&lt;/font&gt;网页！&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 标签元素完整的标签为元素 属性进制HTML和css乱码问题 乱码出现的原因：编码解码采用的字符集不一致 字符集：编码和解码所采用的规则，我们成为字符集常见字符集：ASCⅡ 、 ISO8859-1 、 GBK 、 GB2312（中文编码） 、 UTF-8（全球通用）","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"}]},{"title":"前端基础","slug":"前端基础","date":"2020-01-10T10:00:00.000Z","updated":"2020-02-20T10:49:27.245Z","comments":true,"path":"2020/01/10/前端基础/","link":"","permalink":"http://yoursite.com/2020/01/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/","excerpt":"","text":"C/S和B/S目前市面上的软件架构分为C/S架构和B/S架构 C/S架构： 一般使用的软件都是C/S架构 比如系统软件中的360、QQ、ofice、等 C表示客户端，用户通过客户端来使用软件 S表示服务器，服务器负责处理软件的业务逻辑特点： 软件使用前必须得安装 软件更新时，服务器和客户端得同时更新 C/S架构不能跨平台使用 各自平台对应各自版本 C/S架构的软件客户端和服务通信采用的是自有的协议，相对来说比较安全 B/S架构 B/S本质上也是C/S，只不过B/S架构的软件，通过使用浏览器作为软件的客户端 B/S架构的软件通过使用浏览器访问网页的形式，来使用软件 比如：京东，淘宝，知乎等特点： 软件不需要安装，直接使用浏览器访问指定的网页即可 软件更新时，客户端不需要更新 软件可以跨平台，只要系统中有浏览器，就可以使用 B/S架构的软件，客户端和服务器之间通信采用的是通用的HTTP协议，相对来说不安全。HTTPS协议相对来说比HTTP更加安全 结构-HTML用于描述页面的结构 表现-CSS用于控制页面元素的样式 行为-JavaScript用于响应用户操作","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-10T07:21:07.658Z","updated":"2020-01-10T07:21:07.658Z","comments":true,"path":"2020/01/10/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}