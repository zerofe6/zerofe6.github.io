{"meta":{"title":"bofan's blog","subtitle":"","description":"","author":"范博","url":"http://yoursite.com","root":"/"},"pages":[{"title":"about","date":"2020-01-10T07:48:47.000Z","updated":"2020-01-10T07:48:47.677Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-01-10T07:48:33.000Z","updated":"2020-01-10T07:48:33.095Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-10T07:47:00.000Z","updated":"2020-01-10T07:47:00.390Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"jsp简介","slug":"jsp简介","date":"2020-02-17T08:41:12.000Z","updated":"2020-02-17T09:57:53.894Z","comments":true,"path":"2020/02/17/jsp简介/","link":"","permalink":"http://yoursite.com/2020/02/17/jsp%E7%AE%80%E4%BB%8B/","excerpt":"","text":"JSP(java server page)java服务器端网页，在HTML页面中写java代码的页面 JSP简介： JSP是简化Servlet编写的一种技术，它将java代码和HTML语句混合在同一个文件中编写，只对网页中的要动态产生的内容采用java代码编写，而对固定不变的静态内容采用普通的静态HTML页面的方式编写。 jsp中的代码应该放在body节点下的&lt;%%&gt;中 jsp可以放在web应用程序中除 WEB-INFO的其它任何目录中，jsp的访问格式也与html页面的访问格式完全相同(并不是完全不能，只是不建议，由于该目录下主要放的是一些隐私文件) jsp 运行原理： jsp本质上是一个servlet，jsp程序先编译为servlet文件 然后再进行编译，因此servlet的大部分方法在jsp程序中也能使用。 jsp的9个隐含对象jsp页面的隐含对象一共有9个,隐含对象不需经申明就可以直接使用 1234567891. &lt;font color&#x3D;&quot;red&quot;&gt;request&lt;&#x2F;font&gt;: 为HttpServeletRequest对象 2. response：为HttpServletResponse的对象，在jsp页面中几乎不会使用 3. &lt;font color&#x3D;&quot;red&quot;&gt;pageContext&lt;&#x2F;font&gt;：页面上下文为PageContext的对象，可以从该对象中获取到其它8个隐含对象和其它信息，学习自定义标签时使用 4. &lt;font color&#x3D;&quot;red&quot;&gt;session&lt;&#x2F;font&gt;：代表浏览器和服务器的一次对话，是HttpSession的对象 5. &lt;font color&#x3D;&quot;red&quot;&gt;application&lt;&#x2F;font&gt;: 代表当前应用，能获取当前应用的初始化参数（web.xml中的参数） 6. config：当前jsp对应的servlet的servletConfig对象，若需要访问当前配置的初始化参数需要通过映射来使用，开发的时候几乎不使用![](jsp简介2020_2_17&#x2F;2.png) 7. &lt;font color &#x3D;&quot;red&quot;&gt;out&lt;&#x2F;font&gt;: jspWriter对象，经常使用out.println() 直接将字符串打印到浏览器上 8. page: 指当前jsp对应的servlet对象的引用，但是为Object对象，开发时不使用 9. exception 注意使用exception时必须声明： 以上9个隐含对象均可以在jsp的java代码中使用. pageContext request session application 对属性的作用域范围从小到大 out response config page exception jsp语法jsp中的模板元素jsp中的静态HTML内容 jsp表达式jsp表达式提供了一个将java变量或计算结果输出到客户端的简化方式，它将要输出的变量或表达式直接放在&lt;%= %&gt; 中 jsp脚本片段jsp中的java代码，一个jsp 页面中可以有多个脚本片段，多个脚本片段之间可以相互访问 jsp申明 脚本片段实际上是在方法里的，所以需要声明。jsp申明将java代码封装在&lt;%! %&gt;之中，它里面的代码将被插入到servlet中_jspService方法的外面，不过在jsp页面中，几乎从不使用 jsp注释&lt;%– –%&gt;它与HTML注释的区别是，它可以阻止java代码的执行 和属性相关的方法 方法 Object getAttribute（String name）：获取指定的属性 Enumeration getaAttributeNames（）:获取所有属性的名字组成的Enumeration对象 removeAttribute(String name): 移除指定的属性 void setAttribute（String name , OBject o）:设置属性 pageContext request seeeion application 对象都有这些方法，这四个对象也称之为域对象 pageContext：属性的作用范围仅限于当前jsp页面 request： 属性的作用范围仅限于同一个请求（在有转发的情况下可以跨页面获取当前属性值） session：属性的作用范围限于一次会话（浏览器打开直到关闭称之为一次关闭，在此期间会话不会失效） application：属性的作用范围限于当前web应用。是范围最大的属性作用范围，只要在一处设置属性，在其他各处的JSP或者Servlet中都可以获取到 请求的转发和重定向请求的转发 12345678910//1.请求的转发 /* * 1.调用httpServletRequest 的 getRequestDispatcher方法获取 RequestDispatcher对象 * 调用方法时 需要传入要转发的地址 * 2.调用HTTPServletRequest 的Forward（request，response）方法进行请求的转发. * */ String path = \"testservlet\"; RequestDispatcher requestdispatcher = request.getRequestDispatcher(\"/\"+path); requestdispatcher.forward(request, response); 请求的重定向 12345 //1.请求的重定向调用 response的SendRedirect（path） 方法 String path=\"testtwoservlet\"; response.sendRedirect(path);// 注意路径 本质区别 请求的转发是只发出一次请求，而重定向则发出了两次请求。 具体区别 请求的转发地址栏为初次请求的地址 重定向地址栏不再是除此请求发出的地址，是最后请求的地址 请求转发：在最终的servlet，request对象和中转的request对象是同一个 请求的重定向则不是 请求转发只能转发到当前web应用的资源，而重定向到任何资源 请求的转发：/ 代表当前web应用的根目录 ​ 请求的重定向： / 代表当前web站点的根目录 注意：http://localhost:8084/Day_2_16/a.jsp jsp指令12&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%&gt; 以上为jsp指令，jsp指令只是告诉引擎如何处理jsp页面的其它部分 当前主要有page include taglib三种指令 page指令用于定义jsp页面的各种属性，无论page指令出现在哪，它作用的范围都是整个jsp页面，page指令一般放在jsp页面的起始位置 page指令用于定义jsp页面的各种属性，无论page指令出现在哪，它作用的范围都是整个jsp页面，page指令一般放在jsp页面的起始位置 如 【language=“java”】 【extends=”package.class”】 【session=”true|false”】 【isErrorPage=”true|false”】 【errorPage=”true|false”】 import指令：指定当前jsp页面要导入的类包 session指令：指定当前页面是否可用session变量，也可以说访问当前页面时是否可以生成httpsession对象 errorpage 和iserrorpage,errorpage 指定当前页面出现错误的实际响应页面时什么，其中/代表当前web应用的根目录，在响应errorpage时，服务器采用的是请求转发的方式 1&lt;%@ page errorPage=\"error.jsp\" %&gt; iserrorpage指定当前页面是否为错误处理页面，可以说明当前页面是否可以使用exception对象，一般建议错误页面不能够直接访问到错误页面（将当前页面放入 WEB-INF目录下），除此之外还可以在web.xml文件内配置错误页面 1234&lt;error-page&gt;&lt;!--指定错误代码响应，404找不到资源，500内部错误。。。 还可以安异常类型来指定。--&gt; &lt;error-code&gt;500&lt;/error-code&gt; &lt;location&gt;/WEB-INF/error.jsp&lt;/location&gt; &lt;/error-page&gt; 一般而言，WEB-INF下的文件是不能通过直接输入地址的形式来访问的，一般通过请求的转发来访问。 contenttype 指定当前警示牌页面的响应类型，实际调用的是response.setContentType(“text/html;charset:UTF-8”),通常情况下，对于jsp页面其取值均为“text/html;charset:UTF-8” charset指定返回的页面的字符编码是什么，通常取值UTF-8 pageEcoding 指定当前jsp页面的的字符编码，通常情况下也contentType中的charset的值一样。 isELIgnored 指定当前jsp页面是否可以使用EL表达式，通常取值为true include指令用于通知jsp引擎，在翻译当前jsp页面时，将其它文件的内容合并到当前jsp文件的servlet源文件中，当前jsp页面与静态引入的页面紧密结合为一个servlet 12345678&lt;b&gt;aaaaaaaaaaaaaaa&lt;/b&gt;&lt;%-- 在a.jsp中包含b.jsp file如无/ 则相对于当前文件 否则表示当前web应用的根目录--%&gt;&lt;%@ include file=\"b.jsp\"%&gt; 在a.jsp的源文件中已经包含b中的代码 jsp标签 jsp标签用于把另外一个元素的内容插入到当前jsp页面的输出内容之中，这种在jsp页面执行时的引入方法称之为动态引入 iclude 标签 1&lt;jsp:include page = \"b.jsp\"&gt;&lt;/jsp:include&gt; 动态引入：并不是像include指令一样生成一个servlet源文件，而是生成两个servlet源文件，然后通过一个方法的方式把另一个页面包含进来 include指令和jsp:include 标签 标签是在当前页面执行期间插入被引入的内容，被动态引入的资源必须是一个能独立被WEB容器调用和引用的资源 include只能引入遵循jsp格式的文件，被引入的文件与当前jsp文件共同翻译为一个servlet源文件 forward标签1&lt;jsp:forward page=\"b.jsp\"&gt;&lt;/jsp:forward&gt; 相当于请求的转发 123&lt;%request.getRequestDispatcher(\"/b.jsp\").forward(request,response);%&gt; 但是使用jsp forward标签可以使用jsp:param 向字标签传入一些参数，jsp:include 也可以 123&lt;jsp:forward page=\"b.jsp\"&gt;&lt;jsp:param value=\"abac\" name=\"username\"/&gt;&lt;/jsp:forward&gt; ​ 在b.jsp页面内可以通过request.getparamter(“username”)来获取传入的参数 jsp中文乱码问题 在jsp页面上输入中文，请求页面后不出现乱码：保证 charset和pageEncoding的值一致，且都支持中文，一般取值UTF-8,还需保证浏览器显示的字符编码也和请求的jsp页面的编码一致 获取中文参数值：默认参数在传输过程中使用的编码为ISO-8859-1 对于post请求，在获取请求信息之前，先调用request.setCharacterEncoding()即可 对于get请求，前面的方式无效，应采用先解码再进行编码的方式 可以通过修改tomcat的server.xml文件的方式 遇到的错误 tomcat 端口频繁被占用的问题 最有效直接的方法通过任务管理器结束java虚拟机进程 eclipse卡顿问题 关闭自动构建 关闭自动保存 经常出现配置servlet时 类路径正确但是抛异常找不到类 有未生成.class字节文件的可能 开启自动编译但是并没有自动编译 要说没有编译但是Web-INF/classes目录下已经有该文件 解决方法：更换编辑器一致性级别 重新编译 参考：https://blog.csdn.net/qq_21454973/article/details/79481197","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"},{"name":"jsp","slug":"jsp","permalink":"http://yoursite.com/tags/jsp/"}]},{"title":"HTML简介","slug":"HTML简介","date":"2020-01-10T10:00:10.000Z","updated":"2020-01-10T10:31:52.804Z","comments":true,"path":"2020/01/10/HTML简介/","link":"","permalink":"http://yoursite.com/2020/01/10/HTML%E7%AE%80%E4%BB%8B/","excerpt":"","text":"HTML是超文本标记语言。纯文本中，只能保存纯文本内容，图片，音频，视屏等内容都不能保存，网页为纯文本。 标准格式12345678910111213141516171819202122232425262728293031323334&lt;!doctype html&gt; &lt;!-- html版本声明 编写网页时， 一定要将h5的文档声明写在网页的最上端。避免有些浏览器无法解析该网页 --&gt; &lt;!-- html根标签，一个页面中只有一个根标签，网页中所有内容都在根标签中 --&gt;&lt;html&gt; &lt;!-- head标签用于帮助浏览器解析页面 --&gt; &lt;head&gt; &lt;!-- 标题，默认会显示在浏览器的标题栏中 搜索引擎在检索页面时，会首先检索title中的内容 它是网页中对于搜索引擎来说是最终要的内容，会影响在网页在搜索引擎中的排名 --&gt; &lt;title&gt;这个是我的第一个网页&lt;/title&gt; &lt;/head&gt; &lt;!-- 用于设置网页的主体内容，网页中所有可见的内容，都应该在body中编写 --&gt; &lt;body&gt; &lt;!--注释--&gt; &lt;!-- 属性： 可以通过属性来设置标签，如果处理标签中的可以在开始标签中添加属性 属性需要写在开始标签中，实际上是一个名值对的结构 一个标签中可以使用多个属性 属性名 = “属性值” --&gt; &lt;h1&gt;这是我的&lt;font color= \"lightblue\" size = \"6\"&gt;第一个&lt;/font&gt;网页！&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 标签元素完整的标签为元素 属性进制HTML和css乱码问题 乱码出现的原因：编码解码采用的字符集不一致 字符集：编码和解码所采用的规则，我们成为字符集常见字符集：ASCⅡ 、 ISO8859-1 、 GBK 、 GB2312（中文编码） 、 UTF-8（全球通用）","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"html","slug":"html","permalink":"http://yoursite.com/tags/html/"},{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"前端基础","slug":"前端基础","date":"2020-01-10T10:00:00.000Z","updated":"2020-01-10T10:10:26.352Z","comments":true,"path":"2020/01/10/前端基础/","link":"","permalink":"http://yoursite.com/2020/01/10/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/","excerpt":"","text":"C/S和B/S目前市面上的软件架构分为C/S架构和B/S架构 C/S架构： 一般使用的软件都是C/S架构 比如系统软件中的360、QQ、ofice、等 C表示客户端，用户通过客户端来使用软件 S表示服务器，服务器负责处理软件的业务逻辑特点： 软件使用前必须得安装 软件更新时，服务器和客户端得同时更新 C/S架构不能跨平台使用 各自平台对应各自版本 C/S架构的软件客户端和服务通信采用的是自有的协议，相对来说比较安全 B/S架构 B/S本质上也是C/S，只不过B/S架构的软件，通过使用浏览器作为软件的客户端 B/S架构的软件通过使用浏览器访问网页的形式，来使用软件 比如：京东，淘宝，知乎等特点： 软件不需要安装，直接使用浏览器访问指定的网页即可 软件更新时，客户端不需要更新 软件可以跨平台，只要系统中有浏览器，就可以使用 B/S架构的软件，客户端和服务器之间通信采用的是通用的HTTP协议，相对来说不安全。HTTPS协议相对来说比HTTP更加安全 结构-HTML用于描述页面的结构 表现-CSS用于控制页面元素的样式 行为-JavaScript用于响应用户操作","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-01-10T07:21:07.658Z","updated":"2020-01-10T07:21:07.658Z","comments":true,"path":"2020/01/10/hello-world/","link":"","permalink":"http://yoursite.com/2020/01/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}